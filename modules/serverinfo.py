# *          __  __ _             __  __           _       _
# *         |  \/  (_)_   _ _   _|  \/  | ___   __| |_   _| | ___  ___
# *         | |\/| | | | | | | | | |\/| |/ _ \ / _` | | | | |/ _ \/ __|
# *         | |  | | | |_| | |_| | |  | | (_) | (_| | |_| | |  __/\__ \
# *         |_|  |_|_|\__, |\__,_|_|  |_|\___/ \__,_|\__,_|_|\___||___/
# *                   |___/
# *
# *                          ¬© Copyright 2025
# *
# *                      https://t.me/miyumodules
# *
# * üîí Code is licensed under GNU AGPLv3
# * üåê https://www.gnu.org/licenses/agpl-3.0.html
# * ‚õîÔ∏è You CANNOT edit this file without direct permission from the author.
# * ‚õîÔ∏è You CANNOT distribute this file if you have modified it without the direct permission of the author.

# Name: ServerInfo
# Author: miyumodules
# Commands:
# .serverinfo
# scope: hikka_only
# meta developer: @miyumodules

# meta pic: https://github.com/d4s4n/miyumodules/blob/main/assets/pfp.png?raw=true
# meta banner: https://github.com/d4s4n/miyumodules/blob/main/assets/banner.png?raw=true

__version__ = (1, 0, 5)

import psutil
import platform
import time
from datetime import timedelta
from .. import loader, utils

@loader.tds
class ServerInfoMod(loader.Module):
    """Shows information about the server where the userbot is running"""

    strings = {
        "name": "ServerInfo",
        "server_info_title": "<b>Server Information</b>",
        "cpu_title": "‚îé <b>CPU</b>",
        "cpu_model": "‚î£ <b>Model:</b> <code>{cpu_name}</code>",
        "cpu_cores": "‚î£ <b>Cores:</b> <code>{cpu_cores}</code>",
        "cpu_load": "‚îó <b>Load:</b> <code>{cpu_bar} {cpu_load:.1f}%</code>",
        "mem_title": "‚îé <b>Memory</b>",
        "mem_ram": "‚î£ <b>RAM:</b> <code>{ram_bar} {used_ram:.2f}/{total_ram:.2f} GB</code>",
        "mem_disk": "‚îó <b>Disk:</b> <code>{disk_bar} {used_disk:.2f}/{total_disk:.2f} GB (Free: {free_disk:.2f} GB)</code>",
        "net_title": "‚îé <b>Network</b>",
        "net_traffic": "‚îó <b>Traffic:</b> <code>‚Üì {net_down:.2f} GB / ‚Üë {net_up:.2f} GB</code>",
        "sys_title": "‚îé <b>System</b>",
        "sys_os": "‚î£ <b>OS:</b> <code>{os_info}</code>",
        "sys_python": "‚î£ <b>Python:</b> <code>{python_ver}</code>",
        "sys_uptime": "‚îó <b>Uptime:</b> <code>{uptime_str}</code>",
    }
    
    strings_ru = {
        "_cls_doc": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω —é–∑–µ—Ä–±–æ—Ç",
        "_cmd_doc_serverinfo": "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ",
        "server_info_title": "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ</b>",
        "cpu_title": "‚îé <b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä</b>",
        "cpu_model": "‚î£ <b>–ú–æ–¥–µ–ª—å:</b> <code>{cpu_name}</code>",
        "cpu_cores": "‚î£ <b>–Ø–¥—Ä–∞:</b> <code>{cpu_cores}</code>",
        "cpu_load": "‚îó <b>–ù–∞–≥—Ä—É–∑–∫–∞:</b> <code>{cpu_bar} {cpu_load:.1f}%</code>",
        "mem_title": "‚îé <b>–ü–∞–º—è—Ç—å</b>",
        "mem_ram": "‚î£ <b>–û–ó–£:</b> <code>{ram_bar} {used_ram:.2f}/{total_ram:.2f} –ì–ë</code>",
        "mem_disk": "‚îó <b>–î–∏—Å–∫:</b> <code>{disk_bar} {used_disk:.2f}/{total_disk:.2f} –ì–ë (–°–≤–æ–±–æ–¥–Ω–æ: {free_disk:.2f} –ì–ë)</code>",
        "net_title": "‚îé <b>–°–µ—Ç—å</b>",
        "net_traffic": "‚îó <b>–¢—Ä–∞—Ñ–∏–∫:</b> <code>‚Üì {net_down:.2f} –ì–ë / ‚Üë {net_up:.2f} –ì–ë</code>",
        "sys_title": "‚îé <b>–°–∏—Å—Ç–µ–º–∞</b>",
        "sys_os": "‚î£ <b>–û–°:</b> <code>{os_info}</code>",
        "sys_python": "‚î£ <b>Python:</b> <code>{python_ver}</code>",
        "sys_uptime": "‚îó <b>–ê–ø—Ç–∞–π–º:</b> <code>{uptime_str}</code>",
    }
    
    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"
    )
    async def serverinfo(self, message):
        """Show server info"""
        cpu_load = psutil.cpu_percent(interval=1)
        cpu_cores = psutil.cpu_count(logical=False)
        cpu_name = "Unknown"
        try:
            with open("/proc/cpuinfo") as f:
                for line in f:
                     if "model name" in line:
                         cpu_name = line.split(":", 1)[1].strip()
                         break
        except:
            cpu_name = platform.processor() or "Unknown"

        ram = psutil.virtual_memory()
        total_ram = ram.total / 1024 ** 3
        used_ram = ram.used / 1024 ** 3

        disk = psutil.disk_usage('/')
        total_disk = disk.total / 1024 ** 3
        used_disk = disk.used / 1024 ** 3
        free_disk = disk.free / 1024 ** 3

        net = psutil.net_io_counters()
        net_down = net.bytes_recv / 1024 ** 3
        net_up = net.bytes_sent / 1024 ** 3

        os_info = platform.platform()
        python_ver = platform.python_version()

        boot_time = psutil.boot_time()
        uptime = time.time() - boot_time
        days = int(uptime // (24 * 3600))
        time_part = timedelta(seconds=int(uptime % (24 * 3600)))

        if days:
            if 11 <= days % 100 <= 19:
                day_word = "–¥–Ω–µ–π"
            elif days % 10 == 1:
                day_word = "–¥–µ–Ω—å"
            elif 2 <= days % 10 <= 4:
                day_word = "–¥–Ω—è"
            else:
                day_word = "–¥–Ω–µ–π"
            uptime_str = f"{days} {day_word}, {time_part}"
        else:
            uptime_str = str(time_part)

        bar = lambda p, w=10: '‚ñà' * int(p * w // 100) + '‚ñí' * (w - int(p * w // 100))
        cpu_bar = bar(cpu_load)
        ram_bar = bar(used_ram / total_ram * 100)
        disk_bar = bar(used_disk / total_disk * 100)

        reply = (
            f'{self.strings("server_info_title")}\n\n'
            f'{self.strings("cpu_title")}\n'
            f'{self.strings("cpu_model").format(cpu_name=cpu_name)}\n'
            f'{self.strings("cpu_cores").format(cpu_cores=cpu_cores)}\n'
            f'{self.strings("cpu_load").format(cpu_bar=cpu_bar, cpu_load=cpu_load)}\n\n'
            f'{self.strings("mem_title")}\n'
            f'{self.strings("mem_ram").format(ram_bar=ram_bar, used_ram=used_ram, total_ram=total_ram)}\n'
            f'{self.strings("mem_disk").format(disk_bar=disk_bar, used_disk=used_disk, total_disk=total_disk, free_disk=free_disk)}\n\n'
            f'{self.strings("net_title")}\n'
            f'{self.strings("net_traffic").format(net_down=net_down, net_up=net_up)}\n\n'
            f'{self.strings("sys_title")}\n'
            f'{self.strings("sys_os").format(os_info=os_info)}\n'
            f'{self.strings("sys_python").format(python_ver=python_ver)}\n'
            f'{self.strings("sys_uptime").format(uptime_str=uptime_str)}'
        )

        await utils.answer(message, reply)
